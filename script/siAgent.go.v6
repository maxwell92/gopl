package main

import (
	"bufio"
	"fmt"
	"github.com/kataras/iris"
	"log"
	"os"
	"os/exec"
	"strconv"
	"strings"
	"time"
)

var count int

type Job struct {
	Image  string `json:"image"`
	Tag    string `json:"tag"`
	Status string `json:"status,omitempty"`
	Expire int    `json:"expire"`
}

const (
	SUCC   = "SUCC"
	FAILED = "FAILED"
)

type OperationConfig struct {
	script    string
	waitQueue string
	expire    string
}

type OperationAPI struct {
	*iris.Context
	cfg *OperationConfig
	Job *Job `json:"job"`
}

var usage = `Usage: siAgent <filepath>
`
var waitJobQueue chan *Job

func sync(op OperationAPI) {
	for {
		select {
		case job := <-waitJobQueue:
			{
				job.Expire, _ = strconv.Atoi(op.cfg.expire)
				log.Printf("%s: Waiting --> Running\n", job.Image)
				cmd := exec.Command("/bin/bash", "-C", op.cfg.script, job.Image, job.Tag)
				if cmd == nil {
					log.Printf("Get Command Error\n")
					os.Exit(1)
				}

				go job.killer(cmd)

				err := cmd.Run()
				if err != nil {
					log.Printf("%s: Running --> Killed\n", job.Image)
					//NOTE: in newest version of iris, the Write() function changes to Writef()
					op.Write("%s Sync Error: err=%s\n", job.Image, err)
				} else {
					log.Printf("%s: Running --> Finish\n", job.Image)
					//NOTE: in newest version of iris, the Write() function changes to Writef()
					op.Write("%s Sync Success\n", job.Image)
				}

			}
		}
	}
}

func (j Job) killer(c *exec.Cmd) {
	k := time.NewTimer(time.Duration(j.Expire) * time.Second)
	<-k.C
	c.Process.Kill()
}

func (op OperationAPI) Post() {
	op.Job = new(Job)
	err := op.ReadJSON(op.Job)
	if err != nil {
		log.Printf("ReadJSON Error: err=%s\n", err)
	} else {
		count++
		cnt := strconv.Itoa(count)
		op.Job.Image += cnt
		waitJobQueue <- op.Job
	}

}

func UsageAndExit() {
	if len(os.Args) != 2 {
		fmt.Fprint(os.Stderr, usage)
		os.Exit(1)
	}

}

func Init() *OperationAPI {

	op := new(OperationAPI)
	op.cfg = new(OperationConfig)

	// os.Args[1] will be the configure file location. Default the same directory.
	cfg, err := os.Open(os.Args[1])
	defer cfg.Close()

	if err != nil {
		log.Printf("Open Configure File Error: err=%s", err)
		os.Exit(1)
	}

	reader := bufio.NewReader(cfg)
	scanner := bufio.NewScanner(reader)

	for scanner.Scan() {
		str := scanner.Text()

		comment := strings.Split(str, "#")[0] == ""
		pair := len(strings.Split(str, " ")) == 2

		if !comment && pair {
			content := strings.Split(str, " ")
			fmt.Println(content)
			switch content[0] {
			case "script":
				op.cfg.script = content[1]
				break
			case "waitQueue":
				op.cfg.waitQueue = content[1]
				break
			case "expire":
				op.cfg.expire = content[1]
				break
			default:
				op.cfg.expire = ""
				op.cfg.script = ""
				op.cfg.waitQueue = ""
			}

		} else {
			// it's comment or wrong key value pair
			continue
		}

	}

	f, err1 := os.Open(op.cfg.script)
	defer f.Close()
	if err1 != nil {
		log.Printf("Open Script File Error: err=%s", err)
		os.Exit(1)
	}

	waitJobLen, _ := strconv.Atoi(op.cfg.waitQueue)
	waitJobQueue = make(chan *Job, waitJobLen)

	return op
}

func main() {
	UsageAndExit()
	op := Init()

	count = 0
	go sync(*op)

	iris.API("/sync", *op)
	iris.Listen(":8081")
}
