package main

import (
	"fmt"
	"github.com/kataras/iris"
	"log"
	"os"
	"os/exec"
	"strconv"
)

var count int

type Job struct {
	Image  string `json:"image"`
	Expire int    `json:"expire"`
	Status string `json:"status,omitempty"`
}

const (
	SUCC   = "SUCC"
	FAILED = "FAILED"
)

type OperationAPI struct {
	*iris.Context
	scriptPath string
	Job        *Job `json:"job"`
}

var usage = `Usage: siAgent <filepath>
`

var waitJobQueue chan *Job
var runJobQueue chan *Job
var finJobQueue chan *Job

func sync(script string) {
	for {
		select {
		case job := <-runJobQueue:
			{
				//	log.Printf("Sync Start: %s\n", image)
				cmd := exec.Command("/bin/bash", "-C", script, job.Image)
				err := cmd.Run()
				if err != nil {
					log.Println("Sync Error: err=%s\n", err)
				}
				finJobQueue <- job
				log.Printf("%s: Running --> Finish\n", job.Image)
				//log.Printf("Sync over: %s\n", image)

			}
		}
	}

}

func retrieve() {
	for {
		select {
		case job := <-waitJobQueue:
			{
				runJobQueue <- job
				log.Printf("%s: Waiting --> Running\n", job.Image)

			}
		}
	}
}

func (op OperationAPI) Post() {
	op.Job = new(Job)
	err := op.ReadJSON(op.Job)
	if err != nil {
		log.Printf("ReadJSON Error: err=%s\n", err)
	} else {
		count++
		cnt := strconv.Itoa(count)
		op.Job.Image += cnt
		waitJobQueue <- op.Job
	}

}

func UsageAndExit() {
	if len(os.Args) != 2 {
		fmt.Fprint(os.Stderr, usage)
		os.Exit(1)
	}

}

func Init() *OperationAPI {
	op := new(OperationAPI)
	op.scriptPath = os.Args[1]

	f, err := os.Open(op.scriptPath)
	defer f.Close()
	if err != nil {
		log.Println(err)
		os.Exit(1)
	}

	return op
}

func main() {
	UsageAndExit()
	op := Init()
	waitJobQueue = make(chan *Job, 10)
	runJobQueue = make(chan *Job, 1)
	finJobQueue = make(chan *Job, 10)

	count = 0
	go sync(op.scriptPath)
	go retrieve()

	iris.API("/sync", *op)
	iris.Listen(":8081")
}
